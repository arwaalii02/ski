pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "amirboudidah/gestion-station-ski"
        DOCKER_TAG = "1.0.0"
    }
    stages {
        stage('Main') {
            steps {
                echo "Echo Test of amirboudidah Branch"
            }
        }

        stage('Compile') {
            steps {
                checkout scm
                sh 'mvn compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Test Class Instructor') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'mvn package'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    sh 'mvn clean deploy -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Using credentials ID: dockerhub-credentials"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                    }
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

    }
    post {
        always {
            sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
