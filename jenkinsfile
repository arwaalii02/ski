pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "amirboudidah/gestion-station-ski"
        DOCKER_TAG = "1.0.0"
        NEXUS_URL = "http://192.168.18.134:8081/repository/maven-releases/tn/esprit/spring/gestion-station-ski/1.0/gestion-station-ski-1.0.jar"
        JAR_NAME = "gestion-station-ski-1.0.jar"
    }
    stages {
        stage('Main') {
            steps {
                echo "Echo Test of amirboudidah Branch"
            }
        }

        stage('Compile') {
            steps {
                checkout scm
                sh 'mvn compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Test Class Instructor') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'mvn package'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    sh 'mvn clean deploy -DskipTests'
                }
            }
        }

        stage('Create Docker Repository') {
            steps {
                script {
                    echo "Creating Docker repository if it doesn't exist..."
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        def createRepoResponse = sh(script: """
                            curl -X POST -u '${DOCKER_USERNAME}:${DOCKER_PASSWORD}' \
                            -H 'Content-Type: application/json' \
                            -d '{"name": "gestion-station-ski", "is_private": false}' \
                            https://hub.docker.com/v2/repositories/${DOCKER_USERNAME}
                        """, returnStatus: true)

                        echo "Response Code: ${createRepoResponse}"

                        if (createRepoResponse != 201 && createRepoResponse != 409) {
                            error "Failed to create Docker repository. Please check your permissions or if the repository already exists."
                        } else {
                            echo "Docker repository created successfully or already exists."
                        }
                    }
                }
            }
        }


                stage('Build Docker Image') {
                    steps {
                        script {
                            sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        }
                    }
                }

                stage('Push Docker Image') {
                    steps {
                        script {
                            echo "Using credentials ID: dockerhub-credentials"
                            withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                def loginResult = sh(script: 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin', returnStatus: true)
                                if (loginResult != 0) {
                                    error "Docker login failed! Please check your credentials."
                                }
                            }
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        }
                    }
                }
            }
            post {
                always {
                    sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}'
                }
                success {
                    echo 'Pipeline completed successfully!'
                }
                failure {
                    echo 'Pipeline failed.'
                }
            }
}
